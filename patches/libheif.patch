diff --git a/libheif/heif_emscripten.h b/libheif/heif_emscripten.h
index 56e4180..03f2704 100644
--- a/libheif/heif_emscripten.h
+++ b/libheif/heif_emscripten.h
@@ -166,6 +166,34 @@ static emscripten::val heif_js_decode_image(struct heif_image_handle* handle,
   return result;
 }
 
+static emscripten::val heif_js_decode_image_rgba(struct heif_image_handle* handle)
+{
+  emscripten::val result = emscripten::val::object();
+  if (!handle) {
+    return result;
+  }
+
+  struct heif_image* image;
+  struct heif_error err = heif_decode_image(handle, &image, heif_colorspace::heif_colorspace_RGB,
+                                            heif_chroma::heif_chroma_interleaved_RGBA, nullptr);
+  if (err.code != heif_error_Ok) {
+    return emscripten::val(err);
+  }
+
+  result.set("is_primary", heif_image_handle_is_primary_image(handle));
+  result.set("thumbnails", heif_image_handle_get_number_of_thumbnails(handle));
+  int width = heif_image_get_width(image, heif_channel_interleaved);
+  result.set("width", width);
+  int height = heif_image_get_height(image, heif_channel_interleaved);
+  result.set("height", height);
+  int stride;
+  const uint8_t* plane = heif_image_get_plane_readonly(image, heif_channel_interleaved, &stride);
+  result.set("stride", stride);
+  result.set("plane", emscripten::typed_memory_view(stride * height, plane));
+  result.set("ptr", image);
+  return result;
+}
+
 #define EXPORT_HEIF_FUNCTION(name) \
   emscripten::function(#name, &name, emscripten::allow_raw_pointers())
 
@@ -185,6 +213,9 @@ EMSCRIPTEN_BINDINGS(libheif) {
     &heif_js_context_get_image_handle, emscripten::allow_raw_pointers());
     emscripten::function("heif_js_decode_image",
     &heif_js_decode_image, emscripten::allow_raw_pointers());
+    emscripten::function("heif_js_decode_image_rgba",
+    &heif_js_decode_image_rgba, emscripten::allow_raw_pointers());
+    EXPORT_HEIF_FUNCTION(heif_image_release);
     EXPORT_HEIF_FUNCTION(heif_image_handle_release);
 
     emscripten::enum_<heif_error_code>("heif_error_code")
diff --git a/libheif/plugins/decoder_dav1d.cc b/libheif/plugins/decoder_dav1d.cc
index f60d2ec..9857421 100644
--- a/libheif/plugins/decoder_dav1d.cc
+++ b/libheif/plugins/decoder_dav1d.cc
@@ -95,7 +95,12 @@ struct heif_error dav1d_new_decoder(void** dec)
 
   dav1d_default_settings(&decoder->settings);
 
-  decoder->settings.frame_size_limit = MAX_IMAGE_WIDTH * MAX_IMAGE_HEIGHT;
+  // set frame_size_limit to 8192 * 8192 to keep dav1d silent
+  if (sizeof(size_t) < 8) {
+    decoder->settings.frame_size_limit = 8192 * 8192;
+  } else {
+    decoder->settings.frame_size_limit = MAX_IMAGE_WIDTH * MAX_IMAGE_HEIGHT;
+  }
   decoder->settings.all_layers = 0;
 
   if (dav1d_open(&decoder->context, &decoder->settings) != 0) {
